// Test utilitaire pour la navigation par onglets

export function createTabsTests() {
  console.log('üìë TABS TESTS - Navigation fixe et responsive');
  console.log('Commandes disponibles:');
  console.log('1. tabsTests.testKeyboard() - Test raccourcis clavier');
  console.log('2. tabsTests.testMobile() - Simulation mobile responsive');
  console.log('3. tabsTests.testAccessibility() - V√©rifications a11y');
  console.log('4. tabsTests.showShortcuts() - Liste des raccourcis');
  console.log('5. tabsTests.cycleAll() - Cycle automatique tous onglets');
}

export function testKeyboardShortcuts() {
  console.log('\n‚å®Ô∏è TEST RACCOURCIS CLAVIER:');
  console.log('Raccourcis disponibles:');
  console.log('  ‚Ä¢ Ctrl/Cmd + 1 ‚Üí Boutique');
  console.log('  ‚Ä¢ Ctrl/Cmd + 2 ‚Üí Auto');  
  console.log('  ‚Ä¢ Ctrl/Cmd + 3 ‚Üí Am√©liorations');
  console.log('  ‚Ä¢ Ctrl/Cmd + 4 ‚Üí Skins');
  console.log('  ‚Ä¢ Escape ‚Üí Fermer menu');
  
  console.log('\nüß™ Test automatique raccourcis:');
  
  // Simule les raccourcis clavier
  const shortcuts = [
    { key: '1', name: 'Boutique' },
    { key: '2', name: 'Auto' },
    { key: '3', name: 'Am√©liorations' },
    { key: '4', name: 'Skins' }
  ];
  
  shortcuts.forEach((shortcut, i) => {
    setTimeout(() => {
      const event = new KeyboardEvent('keydown', {
        key: shortcut.key,
        ctrlKey: true,
        bubbles: true
      });
      
      window.dispatchEvent(event);
      console.log(`  ‚Üí ${shortcut.name} activ√© (Ctrl+${shortcut.key})`);
    }, i * 800);
  });
}

export function testMobileResponsive() {
  console.log('\nüì± TEST MOBILE RESPONSIVE:');
  
  // Simule un √©cran mobile
  console.log('Simulation √©cran mobile (375px width):');
  console.log('1. V√©rifiez que les onglets scrollent horizontalement');
  console.log('2. Les emojis doivent √™tre visibles pour une meilleure UX');
  console.log('3. Le scroll snapping doit fonctionner');
  console.log('4. Pas de scrollbar visible');
  
  // Test de scrolling automatique
  const tabsContainer = document.querySelector('[role="tablist"] > div');
  if (tabsContainer) {
    console.log('\nüîÑ Test scroll automatique:');
    tabsContainer.scrollTo({ left: 0, behavior: 'smooth' });
    
    setTimeout(() => {
      tabsContainer.scrollTo({ left: tabsContainer.scrollWidth, behavior: 'smooth' });
      console.log('  ‚Üí Scroll vers la droite');
    }, 500);
    
    setTimeout(() => {
      tabsContainer.scrollTo({ left: 0, behavior: 'smooth' });
      console.log('  ‚Üí Retour au d√©but');
    }, 1500);
  } else {
    console.log('‚ùå Container d\'onglets non trouv√©');
  }
}

export function testAccessibility() {
  console.log('\n‚ôø TEST ACCESSIBILIT√â:');
  
  const tablist = document.querySelector('[role="tablist"]');
  const tabs = document.querySelectorAll('[role="tab"]');
  
  if (tablist) {
    console.log('‚úÖ role="tablist" pr√©sent');
    console.log(`‚úÖ aria-label: "${tablist.getAttribute('aria-label')}"`);
  } else {
    console.log('‚ùå role="tablist" manquant');
  }
  
  if (tabs.length > 0) {
    console.log(`‚úÖ ${tabs.length} onglets trouv√©s`);
    
    tabs.forEach((tab, i) => {
      const ariaSelected = tab.getAttribute('aria-selected');
      const hasRole = tab.getAttribute('role') === 'tab';
      const hasFocus = tab.className.includes('focus:ring');
      
      console.log(`  Onglet ${i + 1}:`);
      console.log(`    ‚Ä¢ role="tab": ${hasRole ? '‚úÖ' : '‚ùå'}`);
      console.log(`    ‚Ä¢ aria-selected: ${ariaSelected === 'true' ? '‚úÖ true' : ariaSelected === 'false' ? '‚ö™ false' : '‚ùå manquant'}`);
      console.log(`    ‚Ä¢ focus visible: ${hasFocus ? '‚úÖ' : '‚ùå'}`);
    });
  } else {
    console.log('‚ùå Aucun onglet trouv√©');
  }
  
  // Test navigation avec Tab
  console.log('\nüîç Test navigation Tab:');
  console.log('Testez manuellement:');
  console.log('1. Appuyez Tab pour atteindre les onglets');
  console.log('2. Utilisez les fl√®ches gauche/droite pour naviguer');
  console.log('3. Appuyez Entr√©e/Espace pour activer');
  console.log('4. Le focus doit √™tre visible (ring cyan)');
}

export function showShortcuts() {
  console.log('\n‚å®Ô∏è RACCOURCIS CLAVIER DISPONIBLES:');
  console.log('‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê');
  console.log('‚îÇ Raccourci       ‚îÇ Action           ‚îÇ');
  console.log('‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§');
  console.log('‚îÇ Ctrl/Cmd + 1   ‚îÇ üõçÔ∏è  Boutique      ‚îÇ');
  console.log('‚îÇ Ctrl/Cmd + 2   ‚îÇ ‚öôÔ∏è  Auto          ‚îÇ');
  console.log('‚îÇ Ctrl/Cmd + 3   ‚îÇ ‚¨ÜÔ∏è  Am√©liorations ‚îÇ');
  console.log('‚îÇ Ctrl/Cmd + 4   ‚îÇ üëî Skins         ‚îÇ');
  console.log('‚îÇ Escape          ‚îÇ Fermer menu      ‚îÇ');
  console.log('‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò');
}

export function cycleAllTabs() {
  console.log('\nüîÑ CYCLE AUTOMATIQUE ONGLETS:');
  
  const tabs = ['shop', 'auto', 'upgrades', 'skins'];
  
  tabs.forEach((tabId, i) => {
    setTimeout(() => {
      // Simule clic sur l'onglet
      const tabButton = Array.from(document.querySelectorAll('[role="tab"]'))
        .find(btn => btn.textContent.toLowerCase().includes(
          tabId === 'shop' ? 'boutique' : 
          tabId === 'auto' ? 'auto' : 
          tabId === 'upgrades' ? 'am√©liorations' : 
          'skins'
        ));
      
      if (tabButton) {
        tabButton.click();
        console.log(`  ‚Üí ${tabId.toUpperCase()} activ√©`);
      }
    }, i * 1000);
  });
  
  setTimeout(() => {
    console.log('‚úÖ Cycle termin√© - retour √† Boutique');
    const shopTab = Array.from(document.querySelectorAll('[role="tab"]'))
      .find(btn => btn.textContent.toLowerCase().includes('boutique'));
    if (shopTab) shopTab.click();
  }, tabs.length * 1000);
}

export function checkStickyPosition() {
  console.log('\nüìå TEST POSITION STICKY:');
  
  const tabsBar = document.querySelector('[role="tablist"]');
  if (tabsBar) {
    const rect = tabsBar.getBoundingClientRect();
    const styles = window.getComputedStyle(tabsBar);
    
    console.log('√âtat actuel de la barre d\'onglets:');
    console.log(`  ‚Ä¢ Position: ${styles.position}`);
    console.log(`  ‚Ä¢ Top: ${styles.top}`);
    console.log(`  ‚Ä¢ Z-index: ${styles.zIndex}`);
    console.log(`  ‚Ä¢ Distance du top: ${rect.top}px`);
    
    if (styles.position === 'sticky') {
      console.log('‚úÖ Position sticky active');
    } else {
      console.log('‚ùå Position sticky manquante');
    }
    
    if (styles.zIndex >= 10) {
      console.log('‚úÖ Z-index suffisant pour rester au-dessus');
    } else {
      console.log('‚ö†Ô∏è Z-index peut √™tre insuffisant');
    }
  } else {
    console.log('‚ùå Barre d\'onglets non trouv√©e');
  }
}

// Ajoute les fonctions au window en mode DEV
if (import.meta?.env?.DEV || new URLSearchParams(window.location.search).get('dev') === '1') {
  window.tabsTests = {
    help: createTabsTests,
    testKeyboard: testKeyboardShortcuts,
    testMobile: testMobileResponsive,
    testAccessibility: testAccessibility,
    shortcuts: showShortcuts,
    cycleAll: cycleAllTabs,
    checkSticky: checkStickyPosition
  };
  
  console.log('üìë Tabs Tests charg√©s ! Tapez tabsTests.help() pour voir les commandes');
}
